// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using website;

namespace website.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200927164432_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8");

            modelBuilder.Entity("website.Models.Meta", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AlternateTitles")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurationNotes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Developer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Extreme")
                        .HasColumnType("TEXT");

                    b.Property<string>("Languages")
                        .HasColumnType("TEXT");

                    b.Property<string>("LaunchCommand")
                        .HasColumnType("TEXT");

                    b.Property<string>("Library")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("Platform")
                        .HasColumnType("TEXT");

                    b.Property<string>("PlayMode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Publisher")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Series")
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("TagCategories")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Meta");
                });

            modelBuilder.Entity("website.Models.Submission", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("authorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("fileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("logoUrl")
                        .HasColumnType("TEXT");

                    b.Property<int?>("metaId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("size")
                        .HasColumnType("INTEGER");

                    b.Property<string>("status")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("statusUpdated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("submissionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("updatedById")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("metaId")
                        .IsUnique();

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("website.Models.SubmissionNote", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("authorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("dateAdded")
                        .HasColumnType("TEXT");

                    b.Property<string>("note")
                        .HasColumnType("TEXT");

                    b.Property<int?>("submissionid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("submissionid");

                    b.ToTable("SubmissionNote");
                });

            modelBuilder.Entity("website.Models.Submission", b =>
                {
                    b.HasOne("website.Models.Meta", "meta")
                        .WithOne("submission")
                        .HasForeignKey("website.Models.Submission", "metaId");
                });

            modelBuilder.Entity("website.Models.SubmissionNote", b =>
                {
                    b.HasOne("website.Models.Submission", "submission")
                        .WithMany("notes")
                        .HasForeignKey("submissionid");
                });
#pragma warning restore 612, 618
        }
    }
}
